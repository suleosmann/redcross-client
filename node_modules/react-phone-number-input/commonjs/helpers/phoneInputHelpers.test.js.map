{"version":3,"file":"phoneInputHelpers.test.js","names":["_phoneInputHelpers","require","_metadata","_interopRequireDefault","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","key","value","_toPropertyKey","configurable","writable","i","_toPrimitive","toPrimitive","call","TypeError","String","Number","describe","it","getPreSelectedCountry","phoneNumber","countries","getAnyCountry","required","metadata","should","equal","expect","to","be","undefined","defaultCountry","country","phone","defaultLabels","getCountrySelectOptions","countryNames","deep","label","addInternationalOption","ZZ","compareStrings","a","b","parsePhoneNumber","nationalNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","prevCountry","newCountry","useNationalFormat","e164","trimNumber","getCountryForPartialE164Number","latestCountrySelectedByUser","getCountryFromPossiblyIncompleteInternationalPhoneNumber","stripCountryCallingCode","getNationalSignificantNumberDigits","couldNumberBelongToCountry","onPhoneDigitsChange","phoneDigits","countryRequired","prevPhoneDigits","limitMaxLength","international","countryCallingCodeEditable","onChange","rest","getInitialPhoneDigits","number"],"sources":["../../source/helpers/phoneInputHelpers.test.js"],"sourcesContent":["import {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\te164,\r\n\tgetCountryForPartialE164Number,\r\n\tonPhoneDigitsChange,\r\n\tgetInitialPhoneDigits,\r\n\t// Private functions\r\n\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber,\r\n\tcompareStrings,\r\n\tstripCountryCallingCode,\r\n\tgetNationalSignificantNumberDigits,\r\n\tcouldNumberBelongToCountry,\r\n\ttrimNumber\r\n} from './phoneInputHelpers.js'\r\n\r\nimport metadata from 'libphonenumber-js/min/metadata'\r\n\r\ndescribe('phoneInputHelpers', () => {\r\n\tit('should get pre-selected country', () => {\r\n\t\t// Can't return \"International\". Return the first country available.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\t// Has `defaultCountry`.\r\n\t\t// Has `value`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tcountries: ['RU', 'FR'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can be derived from the phone number.\r\n\t\t// Has `defaultCountry`.\r\n\t\t// Has a valid partial `value`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+7800',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tcountries: ['RU', 'FR'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.equal('RU')\r\n\r\n\t\t// Derive country from the phone number.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Country derived from the phone number overrides the supplied one.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Only pre-select a country if it's in the available `countries` list.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should generate country select options', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia' }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// Should substitute missing country names with country codes.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': undefined }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'RU'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (without custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'International'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (with custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia', ZZ: 'Intl' },\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'Intl'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should generate country select options (custom `compareStrings`)', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\t// Reverse order.\r\n\t\t\tcompareStrings: (a, b) => a < b ? 1 : (a > b ? -1 : 0)\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}])\r\n\t})\r\n\r\n\t// it('should generate country select options (Chinese locale)', () => {\r\n\t// \t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/20\r\n\t//\r\n\t// \tconst defaultLabels = {\r\n\t// \t\t'RU': 'Russia (Россия)',\r\n\t// \t\t'US': 'United States',\r\n\t// \t\t'ZZ': 'International'\r\n\t// \t}\r\n\t//\r\n\t// \t// Without custom country names.\r\n\t// \tgetCountrySelectOptions({\r\n\t// \t\tcountries: ['US', 'RU'],\r\n\t// \t\tcountryNames: defaultLabels,\r\n\t// \t\tcompareStringsLocales: 'zh-CN-u-co-pinyin'\r\n\t// \t}).should.deep.equal([{\r\n\t// \t\tvalue: 'US',\r\n\t// \t\tlabel: 'United States'\r\n\t// \t}, {\r\n\t// \t\tvalue: 'RU',\r\n\t// \t\tlabel: 'Russia (Россия)'\r\n\t// \t}])\r\n\t// })\r\n\r\n\tit('should parse phone numbers', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.nationalNumber.should.equal('8005553535')\r\n\r\n\t\t// No `value` passed.\r\n\t\texpect(parsePhoneNumber(null, metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should generate national number digits', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+33509758351', metadata)\r\n\t\tgenerateNationalNumberDigits(phoneNumber).should.equal('0509758351')\r\n\t})\r\n\r\n\tit('should migrate parsed input for new country', () => {\r\n\t\t// Country didn't change. Return the same digits.\r\n\t\tgetPhoneDigitsForNewCountry('', {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Country didn't change. Return the same digits.\r\n\t\tgetPhoneDigitsForNewCountry('123', {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('123')\r\n\r\n\t\t// Country didn't change. Return the same digits.\r\n\t\tgetPhoneDigitsForNewCountry('+123', {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+123')\r\n\r\n\t\t// No input. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Switching from \"International\" to a country\r\n\t\t// to which the phone number already belongs to.\r\n\t\t// No changes. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching between countries. National number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('8005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code not matches. Resets parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code matches. Doesn't reset parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+12223333333', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+12223333333')\r\n\r\n\t\t// Switching countries. International number. Calling code doesn't match.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. Calling code matches.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching countries. International number.\r\n\t\t// Country calling code is longer than the amount of digits available.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. No such country code.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching to \"International\". National number.\r\n\t\tgetPhoneDigitsForNewCountry('8800555', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7800555')\r\n\r\n\t\t// Switching to \"International\". No national (significant) number digits entered.\r\n\t\tgetPhoneDigitsForNewCountry('8', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t// }).should.equal('')\r\n\t\t}).should.equal('+7')\r\n\r\n\t\t// Switching to \"International\". International number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\t// Prefer national format. Country matches. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Prefer national format. Country doesn't match, but country calling code does. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+12133734253', {\r\n\t\t\tnewCountry: 'CA',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('2133734253')\r\n\r\n\t\t// Prefer national format. Country doesn't match, neither does country calling code. Clears the value.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Force international format. `phoneDigits` is empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry(null, {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: false\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with the same calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with another calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\r\n\t\t// `newCountry` is `undefined`.\r\n\t\t// `phoneDigits` are `undefined`.\r\n\t\t// `useNationalFormat` is `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry(undefined, {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('')\r\n\t})\r\n\r\n\tit('should format phone number in e164', () =>\r\n\t{\r\n\t\t// No number.\r\n\t\texpect(e164()).to.be.undefined\r\n\r\n\t\t// International number. Just a '+' sign.\r\n\t\texpect(e164('+')).to.be.undefined\r\n\r\n\t\t// International number.\r\n\t\te164('+7800', null, metadata).should.equal('+7800')\r\n\r\n\t\t// National number. Without country.\r\n\t\texpect(e164('8800', null, metadata)).to.be.undefined\r\n\r\n\t\t// National number. With country. Just national prefix.\r\n\t\t// expect(e164('8', 'RU', metadata)).to.be.undefined\r\n\t\te164('8', 'RU', metadata).should.equal('+7')\r\n\r\n\t\t// National number. With country.\r\n\t\te164('8800', 'RU', metadata).should.equal('+7800')\r\n\t})\r\n\r\n\tit('should trim the phone number if it exceeds the maximum length', () =>\r\n\t{\r\n\t\t// // No number.\r\n\t\t// expect(trimNumber()).to.be.undefined\r\n\r\n\t\t// Empty number.\r\n\t\texpect(trimNumber('', 'RU', metadata)).to.equal('')\r\n\r\n\t\t// // International number. Without country.\r\n\t\t// trimNumber('+780055535351').should.equal('+780055535351')\r\n\r\n\t\t// // National number. Without country.\r\n\t\t// trimNumber('880055535351', null).should.equal('880055535351')\r\n\r\n\t\t// National number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('2135553535', 'US', metadata).should.equal('2135553535')\r\n\t\t// National number. Exceeds the maximum length.\r\n\t\ttrimNumber('21355535351', 'US', metadata).should.equal('2135553535')\r\n\r\n\t\t// International number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('+12135553535', 'US', metadata).should.equal('+12135553535')\r\n\t\t// International number. Exceeds the maximum length.\r\n\t\ttrimNumber('+121355535351', 'US', metadata).should.equal('+12135553535')\r\n\t})\r\n\r\n\tit('should get country for partial E.164 number', () =>\r\n\t{\r\n\t\t// Just a '+' sign.\r\n\t\t// Early return.\r\n\t\tgetCountryForPartialE164Number('+', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Just a '+' sign.\r\n\t\t// Early return.\r\n\t\texpect(getCountryForPartialE164Number('+', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can be derived.\r\n\t\tgetCountryForPartialE164Number('+78005553535', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can be derived.\r\n\t\t// But that country is not allowed.\r\n\t\texpect(getCountryForPartialE164Number('+78005553535', {\r\n\t\t\tcountries: ['US'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is not ambiguous.\r\n\t\tgetCountryForPartialE164Number('+33', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// But some country is required to be selected.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And the user has manually selected that country.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tlatestCountrySelectedByUser: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And the user has manually selected some country\r\n\t\t// but that country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tlatestCountrySelectedByUser: 'FR',\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// But the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And the country is a default one.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And there is some default country\r\n\t\t// but that country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tdefaultCountry: 'FR',\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\t// Bit \"International\" option is not available\r\n\t\t// so some country is required to be selected.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\t// Bit \"International\" option is not available\r\n\t\t// so some country is required to be selected.\r\n\t\tgetCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\t})\r\n\r\n\tit('should get country from possibly incomplete international phone number', () =>\r\n\t{\r\n\t\t// // `001` country calling code.\r\n\t\t// // Non-geographic numbering plan.\r\n\t\t// expect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+800', metadata)).to.be.undefined\r\n\r\n\t\t// Country can be derived.\r\n\t\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber('+33', metadata).should.equal('FR')\r\n\r\n\t\t// Country can't be derived yet.\r\n\t\texpect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+12', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should compare strings', () =>\r\n\t{\r\n\t\tcompareStrings('aa', 'ab').should.equal(-1)\r\n\t\tcompareStrings('aa', 'aa').should.equal(0)\r\n\t\tcompareStrings('aac', 'aab').should.equal(1)\r\n\t})\r\n\r\n\tit('should strip country calling code from a number', () =>\r\n\t{\r\n\t\t// Number is longer than country calling code prefix.\r\n\t\tstripCountryCallingCode('+7800', 'RU', metadata).should.equal('800')\r\n\r\n\t\t// Number is shorter than (or equal to) country calling code prefix.\r\n\t\tstripCountryCallingCode('+3', 'FR', metadata).should.equal('')\r\n\t\tstripCountryCallingCode('+7', 'FR', metadata).should.equal('')\r\n\r\n\t\t// `country` doesn't fit the actual `number`.\r\n\t\t// Iterates through all available country calling codes.\r\n\t\tstripCountryCallingCode('+7800', 'FR', metadata).should.equal('800')\r\n\r\n\t\t// No `country`.\r\n\t\t// And the calling code doesn't belong to any country.\r\n\t\tstripCountryCallingCode('+999', null, metadata).should.equal('')\r\n\t})\r\n\r\n\tit('should get national significant number part', () =>\r\n\t{\r\n\t\t// International number.\r\n\t\tgetNationalSignificantNumberDigits('+7800555', null, metadata).should.equal('800555')\r\n\r\n\t\t// International number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('+', null, metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('+7', null, metadata)).to.be.undefined\r\n\r\n\t\t// National number.\r\n\t\tgetNationalSignificantNumberDigits('8800555', 'RU', metadata).should.equal('800555')\r\n\r\n\t\t// National number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('8', 'RU', metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('', 'RU', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should determine of a number could belong to a country', () =>\r\n\t{\r\n\t\t// Matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'RU', metadata).should.equal(true)\r\n\r\n\t\t// First digit already not matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'FR', metadata).should.equal(false)\r\n\r\n\t\t// First digit matching, second - not matching.\r\n\t\tcouldNumberBelongToCountry('+33', 'AM', metadata).should.equal(false)\r\n\r\n\t\t// Number is shorter than country calling code.\r\n\t\tcouldNumberBelongToCountry('+99', 'KG', metadata).should.equal(true)\r\n\t})\r\n\r\n\tit('should handle phone digits change (should choose new \"value\" based on phone digits)', () => {\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata,\r\n\t\t\tcountryRequired: true,\r\n\t\t\tgetAnyCountry: () => 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+78', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change', () => {\r\n\t\t// Doesn't really support passing an `undefined` value.\r\n\t\t// I dunno why doesn't it throw an error here.\r\n\t\t// Anyway, since this test already existed, I didn't remove it.\r\n\t\tonPhoneDigitsChange(undefined, {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: undefined,\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// Will reset an automatically selected country when it's ambiguous.\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// Won't reset a default selected country when it's ambiguous.\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// Won't reset a manually selected country when it's ambiguous.\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlatestCountrySelectedByUser: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// When inputting a valid number for another country\r\n\t\t// it should switch to that other country.\r\n\t\tonPhoneDigitsChange('+78005553535', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Won't reset an already selected default country when it is ambiguous.\r\n\t\t// Full number entered.\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Won't reset an already manually selected country when it is ambiguous.\r\n\t\t// Full number entered.\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlatestCountrySelectedByUser: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Will reset an automatically selected country when it is ambiguous.\r\n\t\t// Full number entered.\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input,\r\n\t\t// and the user decides to erase all input,\r\n\t\t// and the country neither was selected manually by either not it is a default one.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input,\r\n\t\t// and the user decides to erase all input,\r\n\t\t// and the country neither was selected manually by either not it is a default one.\r\n\t\t// Should reset the country to the default one.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input up to the `+` sign.\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (limitMaxLength: true)', () => {\r\n\t\tonPhoneDigitsChange('21337342530',{\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '2133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+12133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\t// This case is intentionally ignored to simplify the code.\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\t// phoneDigits: '+12133734253',\r\n\t\t\t// country: 'US',\r\n\t\t\t// value: '+12133734253'\r\n\t\t\tphoneDigits: '+121337342530',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+121337342530'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true`)', () => {\r\n\t\t// Shouldn't set `country` to `defaultCountry`\r\n\t\t// when erasing parsed input starting with a `+`\r\n\t\t// when `international` is `true`.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should support forcing international phone number input format.\r\n\t\tonPhoneDigitsChange('2', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+2',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+2'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (reset incompatible international input)', () => {\r\n\t\t// With `country`.\r\n\t\tonPhoneDigitsChange('+1', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Without `country`.\r\n\t\t// Not possible because passing `countryCallingCodeEditable: false` flag\r\n\t\t// automatically means that some country calling code is specified\r\n\t\t// meaning that there is a `country`.\r\n\t\t// Still, test coverage requires the \"else path\" to be covered.\r\n\t\tonPhoneDigitsChange('+1', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: undefined,\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (append national input)', () => {\r\n\t\tonPhoneDigitsChange('8', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (compatible input)', () => {\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false`)', () => {\r\n\t\tconst onChange = (phoneDigits, prevPhoneDigits, country, rest) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\t...rest,\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\t// Reset an automatically selected country.\r\n\t\tonChange('+78', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: undefined,\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\t// Won't reset a manually selected country.\r\n\t\tonChange('+78', '', 'RU', {\r\n\t\t\tlatestCountrySelectedByUser: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\t// Won't reset an automatically selected default country.\r\n\t\tonChange('+78', '', 'RU', {\r\n\t\t\tdefaultCountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\t// Reset an automatically selected country.\r\n\t\tonChange('+121', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\t// Won't reset a manually selected country.\r\n\t\tonChange('+121', '', 'US', {\r\n\t\t\tlatestCountrySelectedByUser: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\t// Won't reset an automatically selected default country.\r\n\t\tonChange('+121', '', 'US', {\r\n\t\t\tdefaultCountry: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\tonChange('+78005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\t// Reset an automatically selected country.\r\n\t\tonChange('+78005553535', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\t// Won't reset a manually selected country.\r\n\t\tonChange('+78005553535', '', 'US', {\r\n\t\t\tlatestCountrySelectedByUser: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\t// Won't reset an automatically selected default country.\r\n\t\tonChange('+78005553535', '', 'US', {\r\n\t\t\tdefaultCountry: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '8800555353', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Empty `phoneDigits`.\r\n\t\tonChange('', '88005553535', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false` and no country selected)', () => {\r\n\t\t// If `international` is `false` then it means that\r\n\t\t// \"International\" option should not be available,\r\n\t\t// so it doesn't handle the cases when it is available.\r\n\r\n\t\tconst onChange = (phoneDigits) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\tprevPhoneDigits: '',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// No country calling code.\r\n\t\tonChange('+').should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7').should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\tonChange('+78').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\tonChange('+3311').should.deep.equal({\r\n\t\t\tphoneDigits: '11',\r\n\t\t\tcountry: 'FR',\r\n\t\t\tvalue: '+3311'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Full number.\r\n\t\tonChange('+78005553535').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should get initial parsed input', () => {\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('88005553535')\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has no `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+870773111632')\r\n\t})\r\n})"],"mappings":"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","ignoreList":[]}